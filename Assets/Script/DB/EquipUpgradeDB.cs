// This code automatically generated by TableCodeGen
using UnityEngine;
using System.Collections;
using System.Collections.Generic;

public class EquipUpgradeDB : MonoBehaviour
{
    
    public TextAsset ItemDatabase;

   
    public void Awake()
    {
        ItemDatabase = Resources.Load("CSV/EquipUpgrade") as TextAsset;
        Load(ItemDatabase);
    }

    //싱글톤만들기. 변경
    private static EquipUpgradeDB _instance = null;
    public static EquipUpgradeDB Instance
    {
        get
        {
            if (_instance == null)
            {
                _instance = FindObjectOfType(typeof(EquipUpgradeDB)) as EquipUpgradeDB;

                if (_instance == null)
                {
                }
            }
            return _instance;
        }
    }


	public class Row
	{
        		public string num;
		public string needcount;
		public string percent;
		public string needupgradecount;
		public string upgradestat;
		public string crystal;
		public string itemuse;
		public string crystaluse;

	}

	List<Row> rowList = new List<Row>();
	bool isLoaded = false;

	public bool IsLoaded()
	{
		return isLoaded;
	}

	public List<Row> GetRowList()
	{
		return rowList;
	}

	public void Load(TextAsset csv)
	{
		rowList.Clear();
		string[][] grid = CsvParser2.Parse(csv.text);
		for(int i = 1 ; i < grid.Length ; i++)
		{
			Row row = new Row();
			row.num = grid[i][0];
			row.needcount = grid[i][1];
			row.percent = grid[i][2];
			row.needupgradecount = grid[i][3];
			row.upgradestat = grid[i][4];
			row.crystal = grid[i][5];
			row.itemuse = grid[i][6];
			row.crystaluse = grid[i][7];

			rowList.Add(row);
		}
		isLoaded = true;
	}

	public int NumRows()
	{
		return rowList.Count;
	}

	public Row GetAt(int i)
	{
		if(rowList.Count <= i)
			return null;
		return rowList[i];
	}

	public Row Find_num(string find)
	{
		return rowList.Find(x => x.num == find);
	}
	public List<Row> FindAll_num(string find)
	{
		return rowList.FindAll(x => x.num == find);
	}
	public Row Find_needcount(string find)
	{
		return rowList.Find(x => x.needcount == find);
	}
	public List<Row> FindAll_needcount(string find)
	{
		return rowList.FindAll(x => x.needcount == find);
	}
	public Row Find_percent(string find)
	{
		return rowList.Find(x => x.percent == find);
	}
	public List<Row> FindAll_percent(string find)
	{
		return rowList.FindAll(x => x.percent == find);
	}
	public Row Find_needupgradecount(string find)
	{
		return rowList.Find(x => x.needupgradecount == find);
	}
	public List<Row> FindAll_needupgradecount(string find)
	{
		return rowList.FindAll(x => x.needupgradecount == find);
	}
	public Row Find_upgradestat(string find)
	{
		return rowList.Find(x => x.upgradestat == find);
	}
	public List<Row> FindAll_upgradestat(string find)
	{
		return rowList.FindAll(x => x.upgradestat == find);
	}
	public Row Find_crystal(string find)
	{
		return rowList.Find(x => x.crystal == find);
	}
	public List<Row> FindAll_crystal(string find)
	{
		return rowList.FindAll(x => x.crystal == find);
	}
	public Row Find_itemuse(string find)
	{
		return rowList.Find(x => x.itemuse == find);
	}
	public List<Row> FindAll_itemuse(string find)
	{
		return rowList.FindAll(x => x.itemuse == find);
	}
	public Row Find_crystaluse(string find)
	{
		return rowList.Find(x => x.crystaluse == find);
	}
	public List<Row> FindAll_crystaluse(string find)
	{
		return rowList.FindAll(x => x.crystaluse == find);
	}

}