// This code automatically generated by TableCodeGen
using UnityEngine;
using System.Collections;
using System.Collections.Generic;

public class SetDBDB : MonoBehaviour
{
    
    public TextAsset ItemDatabase;

   
    public void Awake()
    {
        ItemDatabase = Resources.Load("CSV/SetDB") as TextAsset;
        Load(ItemDatabase);
    }

    //싱글톤만들기. 변경
    private static SetDBDB _instance = null;
    public static SetDBDB Instance
    {
        get
        {
            if (_instance == null)
            {
                _instance = FindObjectOfType(typeof(SetDBDB)) as SetDBDB;

                if (_instance == null)
                {
                }
            }
            return _instance;
        }
    }


	public class Row
	{
        		public string id;
		public string coreidd;
		public string explain;
		public string setcount;
		public string name ;
		public string description;
		public string str;
		public string dex;
		public string Int;
		public string wis;
		public string atk;
		public string matk;
		public string crit;
		public string critdmg;
		public string cooldown;
		public string hp;
		public string mp;
		public string maxdotcount;
		public string dotdmgup;
		public string dotstackup;
		public string atkspeed;
		public string castspd;
		public string reduceddmg;

	}

	List<Row> rowList = new List<Row>();
	bool isLoaded = false;

	public bool IsLoaded()
	{
		return isLoaded;
	}

	public List<Row> GetRowList()
	{
		return rowList;
	}

	public void Load(TextAsset csv)
	{
		rowList.Clear();
		string[][] grid = CsvParser2.Parse(csv.text);
		for(int i = 1 ; i < grid.Length ; i++)
		{
			Row row = new Row();
			row.id = grid[i][0];
			row.coreidd = grid[i][1];
			row.explain = grid[i][2];
			row.setcount = grid[i][3];
			row.name  = grid[i][4];
			row.description = grid[i][5];
			row.str = grid[i][6];
			row.dex = grid[i][7];
			row.Int = grid[i][8];
			row.wis = grid[i][9];
			row.atk = grid[i][10];
			row.matk = grid[i][11];
			row.crit = grid[i][12];
			row.critdmg = grid[i][13];
			row.cooldown = grid[i][14];
			row.hp = grid[i][15];
			row.mp = grid[i][16];
			row.maxdotcount = grid[i][17];
			row.dotdmgup = grid[i][18];
			row.dotstackup = grid[i][19];
			row.atkspeed = grid[i][20];
			row.castspd = grid[i][21];
			row.reduceddmg = grid[i][22];

			rowList.Add(row);
		}
		isLoaded = true;
	}

	public int NumRows()
	{
		return rowList.Count;
	}

	public Row GetAt(int i)
	{
		if(rowList.Count <= i)
			return null;
		return rowList[i];
	}

	public Row Find_id(string find)
	{
		return rowList.Find(x => x.id == find);
	}
	public List<Row> FindAll_id(string find)
	{
		return rowList.FindAll(x => x.id == find);
	}
	public Row Find_coreidd(string find)
	{
		return rowList.Find(x => x.coreidd == find);
	}
	public List<Row> FindAll_coreidd(string find)
	{
		return rowList.FindAll(x => x.coreidd == find);
	}
	public Row Find_explain(string find)
	{
		return rowList.Find(x => x.explain == find);
	}
	public List<Row> FindAll_explain(string find)
	{
		return rowList.FindAll(x => x.explain == find);
	}
	public Row Find_setcount(string find)
	{
		return rowList.Find(x => x.setcount == find);
	}
	public List<Row> FindAll_setcount(string find)
	{
		return rowList.FindAll(x => x.setcount == find);
	}
	public Row Find_name (string find)
	{
		return rowList.Find(x => x.name  == find);
	}
	public List<Row> FindAll_name (string find)
	{
		return rowList.FindAll(x => x.name  == find);
	}
	public Row Find_description(string find)
	{
		return rowList.Find(x => x.description == find);
	}
	public List<Row> FindAll_description(string find)
	{
		return rowList.FindAll(x => x.description == find);
	}
	public Row Find_str(string find)
	{
		return rowList.Find(x => x.str == find);
	}
	public List<Row> FindAll_str(string find)
	{
		return rowList.FindAll(x => x.str == find);
	}
	public Row Find_dex(string find)
	{
		return rowList.Find(x => x.dex == find);
	}
	public List<Row> FindAll_dex(string find)
	{
		return rowList.FindAll(x => x.dex == find);
	}
	public Row Find_Int(string find)
	{
		return rowList.Find(x => x.Int == find);
	}
	public List<Row> FindAll_Int(string find)
	{
		return rowList.FindAll(x => x.Int == find);
	}
	public Row Find_wis(string find)
	{
		return rowList.Find(x => x.wis == find);
	}
	public List<Row> FindAll_wis(string find)
	{
		return rowList.FindAll(x => x.wis == find);
	}
	public Row Find_atk(string find)
	{
		return rowList.Find(x => x.atk == find);
	}
	public List<Row> FindAll_atk(string find)
	{
		return rowList.FindAll(x => x.atk == find);
	}
	public Row Find_matk(string find)
	{
		return rowList.Find(x => x.matk == find);
	}
	public List<Row> FindAll_matk(string find)
	{
		return rowList.FindAll(x => x.matk == find);
	}
	public Row Find_crit(string find)
	{
		return rowList.Find(x => x.crit == find);
	}
	public List<Row> FindAll_crit(string find)
	{
		return rowList.FindAll(x => x.crit == find);
	}
	public Row Find_critdmg(string find)
	{
		return rowList.Find(x => x.critdmg == find);
	}
	public List<Row> FindAll_critdmg(string find)
	{
		return rowList.FindAll(x => x.critdmg == find);
	}
	public Row Find_cooldown(string find)
	{
		return rowList.Find(x => x.cooldown == find);
	}
	public List<Row> FindAll_cooldown(string find)
	{
		return rowList.FindAll(x => x.cooldown == find);
	}
	public Row Find_hp(string find)
	{
		return rowList.Find(x => x.hp == find);
	}
	public List<Row> FindAll_hp(string find)
	{
		return rowList.FindAll(x => x.hp == find);
	}
	public Row Find_mp(string find)
	{
		return rowList.Find(x => x.mp == find);
	}
	public List<Row> FindAll_mp(string find)
	{
		return rowList.FindAll(x => x.mp == find);
	}
	public Row Find_maxdotcount(string find)
	{
		return rowList.Find(x => x.maxdotcount == find);
	}
	public List<Row> FindAll_maxdotcount(string find)
	{
		return rowList.FindAll(x => x.maxdotcount == find);
	}
	public Row Find_dotdmgup(string find)
	{
		return rowList.Find(x => x.dotdmgup == find);
	}
	public List<Row> FindAll_dotdmgup(string find)
	{
		return rowList.FindAll(x => x.dotdmgup == find);
	}
	public Row Find_dotstackup(string find)
	{
		return rowList.Find(x => x.dotstackup == find);
	}
	public List<Row> FindAll_dotstackup(string find)
	{
		return rowList.FindAll(x => x.dotstackup == find);
	}
	public Row Find_atkspeed(string find)
	{
		return rowList.Find(x => x.atkspeed == find);
	}
	public List<Row> FindAll_atkspeed(string find)
	{
		return rowList.FindAll(x => x.atkspeed == find);
	}
	public Row Find_castspd(string find)
	{
		return rowList.Find(x => x.castspd == find);
	}
	public List<Row> FindAll_castspd(string find)
	{
		return rowList.FindAll(x => x.castspd == find);
	}
	public Row Find_reduceddmg(string find)
	{
		return rowList.Find(x => x.reduceddmg == find);
	}
	public List<Row> FindAll_reduceddmg(string find)
	{
		return rowList.FindAll(x => x.reduceddmg == find);
	}

}