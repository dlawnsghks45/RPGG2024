// This code automatically generated by TableCodeGen
using UnityEngine;
using System.Collections;
using System.Collections.Generic;

public class WorldBossDB : MonoBehaviour
{
    
    public TextAsset ItemDatabase;

   
    public void Awake()
    {
        ItemDatabase = Resources.Load("CSV/WorldBoss") as TextAsset;
        Load(ItemDatabase);
    }

    //싱글톤만들기. 변경
    private static WorldBossDB _instance = null;
    public static WorldBossDB Instance
    {
        get
        {
            if (_instance == null)
            {
                _instance = FindObjectOfType(typeof(WorldBossDB)) as WorldBossDB;

                if (_instance == null)
                {
                }
            }
            return _instance;
        }
    }


	public class Row
	{
        		public string id;
		public string description;
		public string monsterid;
		public string mondropid;
		public string level;
		public string rankinguuid;
		public string Dataname;
		public string arrynum;
		public string arrynum2;

	}

	List<Row> rowList = new List<Row>();
	bool isLoaded = false;

	public bool IsLoaded()
	{
		return isLoaded;
	}

	public List<Row> GetRowList()
	{
		return rowList;
	}

	public void Load(TextAsset csv)
	{
		rowList.Clear();
		string[][] grid = CsvParser2.Parse(csv.text);
		for(int i = 1 ; i < grid.Length ; i++)
		{
			Row row = new Row();
			row.id = grid[i][0];
			row.description = grid[i][1];
			row.monsterid = grid[i][2];
			row.mondropid = grid[i][3];
			row.level = grid[i][4];
			row.rankinguuid = grid[i][5];
			row.Dataname = grid[i][6];
			row.arrynum = grid[i][7];
			row.arrynum2 = grid[i][8];

			rowList.Add(row);
		}
		isLoaded = true;
	}

	public int NumRows()
	{
		return rowList.Count;
	}

	public Row GetAt(int i)
	{
		if(rowList.Count <= i)
			return null;
		return rowList[i];
	}

	public Row Find_id(string find)
	{
		return rowList.Find(x => x.id == find);
	}
	public List<Row> FindAll_id(string find)
	{
		return rowList.FindAll(x => x.id == find);
	}
	public Row Find_description(string find)
	{
		return rowList.Find(x => x.description == find);
	}
	public List<Row> FindAll_description(string find)
	{
		return rowList.FindAll(x => x.description == find);
	}
	public Row Find_monsterid(string find)
	{
		return rowList.Find(x => x.monsterid == find);
	}
	public List<Row> FindAll_monsterid(string find)
	{
		return rowList.FindAll(x => x.monsterid == find);
	}
	public Row Find_mondropid(string find)
	{
		return rowList.Find(x => x.mondropid == find);
	}
	public List<Row> FindAll_mondropid(string find)
	{
		return rowList.FindAll(x => x.mondropid == find);
	}
	public Row Find_level(string find)
	{
		return rowList.Find(x => x.level == find);
	}
	public List<Row> FindAll_level(string find)
	{
		return rowList.FindAll(x => x.level == find);
	}
	public Row Find_rankinguuid(string find)
	{
		return rowList.Find(x => x.rankinguuid == find);
	}
	public List<Row> FindAll_rankinguuid(string find)
	{
		return rowList.FindAll(x => x.rankinguuid == find);
	}
	public Row Find_Dataname(string find)
	{
		return rowList.Find(x => x.Dataname == find);
	}
	public List<Row> FindAll_Dataname(string find)
	{
		return rowList.FindAll(x => x.Dataname == find);
	}
	public Row Find_arrynum(string find)
	{
		return rowList.Find(x => x.arrynum == find);
	}
	public List<Row> FindAll_arrynum(string find)
	{
		return rowList.FindAll(x => x.arrynum == find);
	}
	public Row Find_arrynum2(string find)
	{
		return rowList.Find(x => x.arrynum2 == find);
	}
	public List<Row> FindAll_arrynum2(string find)
	{
		return rowList.FindAll(x => x.arrynum2 == find);
	}

}