// This code automatically generated by TableCodeGen
using UnityEngine;
using System.Collections;
using System.Collections.Generic;

public class PetDB : MonoBehaviour
{
    
    public TextAsset ItemDatabase;

   
    public void Awake()
    {
        ItemDatabase = Resources.Load("CSV/Pet") as TextAsset;
        Load(ItemDatabase);
    }

    //싱글톤만들기. 변경
    private static PetDB _instance = null;
    public static PetDB Instance
    {
        get
        {
            if (_instance == null)
            {
                _instance = FindObjectOfType(typeof(PetDB)) as PetDB;

                if (_instance == null)
                {
                }
            }
            return _instance;
        }
    }


	public class Row
	{
        		public string id;
		public string panelnum;
		public string desc;
		public string descStat;
		public string descSpawn;
		public string name;
		public string info;
		public string info_upgrade;
		public string info_equip;
		public string info_equip_upgrade;
		public string sprite;
		public string rare;
		public string starcount;
		public string isshow;
		public string stathave;
		public string statpercent;
		public string stathavenum;
		public string DESC;
		public string Stattype;
		public string StatCount;
		public string ispercent;
		public string Stat0;
		public string Stat1;
		public string Stat2;
		public string Stat3;
		public string Stat4;
		public string upgradeid;
		public string upgradehw;
		public string smeltid;
		public string smeltcount;

	}

	List<Row> rowList = new List<Row>();
	bool isLoaded = false;

	public bool IsLoaded()
	{
		return isLoaded;
	}

	public List<Row> GetRowList()
	{
		return rowList;
	}

	public void Load(TextAsset csv)
	{
		rowList.Clear();
		string[][] grid = CsvParser2.Parse(csv.text);
		for(int i = 1 ; i < grid.Length ; i++)
		{
			Row row = new Row();
			row.id = grid[i][0];
			row.panelnum = grid[i][1];
			row.desc = grid[i][2];
			row.descStat = grid[i][3];
			row.descSpawn = grid[i][4];
			row.name = grid[i][5];
			row.info = grid[i][6];
			row.info_upgrade = grid[i][7];
			row.info_equip = grid[i][8];
			row.info_equip_upgrade = grid[i][9];
			row.sprite = grid[i][10];
			row.rare = grid[i][11];
			row.starcount = grid[i][12];
			row.isshow = grid[i][13];
			row.stathave = grid[i][14];
			row.statpercent = grid[i][15];
			row.stathavenum = grid[i][16];
			row.DESC = grid[i][17];
			row.Stattype = grid[i][18];
			row.StatCount = grid[i][19];
			row.ispercent = grid[i][20];
			row.Stat0 = grid[i][21];
			row.Stat1 = grid[i][22];
			row.Stat2 = grid[i][23];
			row.Stat3 = grid[i][24];
			row.Stat4 = grid[i][25];
			row.upgradeid = grid[i][26];
			row.upgradehw = grid[i][27];
			row.smeltid = grid[i][28];
			row.smeltcount = grid[i][29];

			rowList.Add(row);
		}
		isLoaded = true;
	}

	public int NumRows()
	{
		return rowList.Count;
	}

	public Row GetAt(int i)
	{
		if(rowList.Count <= i)
			return null;
		return rowList[i];
	}

	public Row Find_id(string find)
	{
		return rowList.Find(x => x.id == find);
	}
	public List<Row> FindAll_id(string find)
	{
		return rowList.FindAll(x => x.id == find);
	}
	public Row Find_panelnum(string find)
	{
		return rowList.Find(x => x.panelnum == find);
	}
	public List<Row> FindAll_panelnum(string find)
	{
		return rowList.FindAll(x => x.panelnum == find);
	}
	public Row Find_desc(string find)
	{
		return rowList.Find(x => x.desc == find);
	}
	public List<Row> FindAll_desc(string find)
	{
		return rowList.FindAll(x => x.desc == find);
	}
	public Row Find_descStat(string find)
	{
		return rowList.Find(x => x.descStat == find);
	}
	public List<Row> FindAll_descStat(string find)
	{
		return rowList.FindAll(x => x.descStat == find);
	}
	public Row Find_descSpawn(string find)
	{
		return rowList.Find(x => x.descSpawn == find);
	}
	public List<Row> FindAll_descSpawn(string find)
	{
		return rowList.FindAll(x => x.descSpawn == find);
	}
	public Row Find_name(string find)
	{
		return rowList.Find(x => x.name == find);
	}
	public List<Row> FindAll_name(string find)
	{
		return rowList.FindAll(x => x.name == find);
	}
	public Row Find_info(string find)
	{
		return rowList.Find(x => x.info == find);
	}
	public List<Row> FindAll_info(string find)
	{
		return rowList.FindAll(x => x.info == find);
	}
	public Row Find_info_upgrade(string find)
	{
		return rowList.Find(x => x.info_upgrade == find);
	}
	public List<Row> FindAll_info_upgrade(string find)
	{
		return rowList.FindAll(x => x.info_upgrade == find);
	}
	public Row Find_info_equip(string find)
	{
		return rowList.Find(x => x.info_equip == find);
	}
	public List<Row> FindAll_info_equip(string find)
	{
		return rowList.FindAll(x => x.info_equip == find);
	}
	public Row Find_info_equip_upgrade(string find)
	{
		return rowList.Find(x => x.info_equip_upgrade == find);
	}
	public List<Row> FindAll_info_equip_upgrade(string find)
	{
		return rowList.FindAll(x => x.info_equip_upgrade == find);
	}
	public Row Find_sprite(string find)
	{
		return rowList.Find(x => x.sprite == find);
	}
	public List<Row> FindAll_sprite(string find)
	{
		return rowList.FindAll(x => x.sprite == find);
	}
	public Row Find_rare(string find)
	{
		return rowList.Find(x => x.rare == find);
	}
	public List<Row> FindAll_rare(string find)
	{
		return rowList.FindAll(x => x.rare == find);
	}
	public Row Find_starcount(string find)
	{
		return rowList.Find(x => x.starcount == find);
	}
	public List<Row> FindAll_starcount(string find)
	{
		return rowList.FindAll(x => x.starcount == find);
	}
	public Row Find_isshow(string find)
	{
		return rowList.Find(x => x.isshow == find);
	}
	public List<Row> FindAll_isshow(string find)
	{
		return rowList.FindAll(x => x.isshow == find);
	}
	public Row Find_stathave(string find)
	{
		return rowList.Find(x => x.stathave == find);
	}
	public List<Row> FindAll_stathave(string find)
	{
		return rowList.FindAll(x => x.stathave == find);
	}
	public Row Find_statpercent(string find)
	{
		return rowList.Find(x => x.statpercent == find);
	}
	public List<Row> FindAll_statpercent(string find)
	{
		return rowList.FindAll(x => x.statpercent == find);
	}
	public Row Find_stathavenum(string find)
	{
		return rowList.Find(x => x.stathavenum == find);
	}
	public List<Row> FindAll_stathavenum(string find)
	{
		return rowList.FindAll(x => x.stathavenum == find);
	}
	public Row Find_DESC(string find)
	{
		return rowList.Find(x => x.DESC == find);
	}
	public List<Row> FindAll_DESC(string find)
	{
		return rowList.FindAll(x => x.DESC == find);
	}
	public Row Find_Stattype(string find)
	{
		return rowList.Find(x => x.Stattype == find);
	}
	public List<Row> FindAll_Stattype(string find)
	{
		return rowList.FindAll(x => x.Stattype == find);
	}
	public Row Find_StatCount(string find)
	{
		return rowList.Find(x => x.StatCount == find);
	}
	public List<Row> FindAll_StatCount(string find)
	{
		return rowList.FindAll(x => x.StatCount == find);
	}
	public Row Find_ispercent(string find)
	{
		return rowList.Find(x => x.ispercent == find);
	}
	public List<Row> FindAll_ispercent(string find)
	{
		return rowList.FindAll(x => x.ispercent == find);
	}
	public Row Find_Stat0(string find)
	{
		return rowList.Find(x => x.Stat0 == find);
	}
	public List<Row> FindAll_Stat0(string find)
	{
		return rowList.FindAll(x => x.Stat0 == find);
	}
	public Row Find_Stat1(string find)
	{
		return rowList.Find(x => x.Stat1 == find);
	}
	public List<Row> FindAll_Stat1(string find)
	{
		return rowList.FindAll(x => x.Stat1 == find);
	}
	public Row Find_Stat2(string find)
	{
		return rowList.Find(x => x.Stat2 == find);
	}
	public List<Row> FindAll_Stat2(string find)
	{
		return rowList.FindAll(x => x.Stat2 == find);
	}
	public Row Find_Stat3(string find)
	{
		return rowList.Find(x => x.Stat3 == find);
	}
	public List<Row> FindAll_Stat3(string find)
	{
		return rowList.FindAll(x => x.Stat3 == find);
	}
	public Row Find_Stat4(string find)
	{
		return rowList.Find(x => x.Stat4 == find);
	}
	public List<Row> FindAll_Stat4(string find)
	{
		return rowList.FindAll(x => x.Stat4 == find);
	}
	public Row Find_upgradeid(string find)
	{
		return rowList.Find(x => x.upgradeid == find);
	}
	public List<Row> FindAll_upgradeid(string find)
	{
		return rowList.FindAll(x => x.upgradeid == find);
	}
	public Row Find_upgradehw(string find)
	{
		return rowList.Find(x => x.upgradehw == find);
	}
	public List<Row> FindAll_upgradehw(string find)
	{
		return rowList.FindAll(x => x.upgradehw == find);
	}
	public Row Find_smeltid(string find)
	{
		return rowList.Find(x => x.smeltid == find);
	}
	public List<Row> FindAll_smeltid(string find)
	{
		return rowList.FindAll(x => x.smeltid == find);
	}
	public Row Find_smeltcount(string find)
	{
		return rowList.Find(x => x.smeltcount == find);
	}
	public List<Row> FindAll_smeltcount(string find)
	{
		return rowList.FindAll(x => x.smeltcount == find);
	}

}