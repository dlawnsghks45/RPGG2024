// This code automatically generated by TableCodeGen
using UnityEngine;
using System.Collections;
using System.Collections.Generic;

public class MapDB : MonoBehaviour
{
    
    public TextAsset ItemDatabase;

   
    public void Awake()
    {
        ItemDatabase = Resources.Load("CSV/Map") as TextAsset;
        Load(ItemDatabase);
    }

    //싱글톤만들기. 변경
    private static MapDB _instance = null;
    public static MapDB Instance
    {
        get
        {
            if (_instance == null)
            {
                _instance = FindObjectOfType(typeof(MapDB)) as MapDB;

                if (_instance == null)
                {
                }
            }
            return _instance;
        }
    }


	public class Row
	{
        		public string id;
		public string description;
		public string coreid;
		public string maparray;
		public string mapnum;
		public string name;
		public string maptype;
		public string maplevel;
		public string maprank;
		public string mapneedid;
		public string mapneednum;
		public string mapnextstage;
		public string monsterid;
		public string minlevel;
		public string maxlevel;
		public string maplayer0;
		public string maplayer1;
		public string maplayer2;
		public string mapslotbackground;
		public string mapcount;

	}

	List<Row> rowList = new List<Row>();
	bool isLoaded = false;

	public bool IsLoaded()
	{
		return isLoaded;
	}

	public List<Row> GetRowList()
	{
		return rowList;
	}

	public void Load(TextAsset csv)
	{
		rowList.Clear();
		string[][] grid = CsvParser2.Parse(csv.text);
		for(int i = 1 ; i < grid.Length ; i++)
		{
			Row row = new Row();
			row.id = grid[i][0];
			row.description = grid[i][1];
			row.coreid = grid[i][2];
			row.maparray = grid[i][3];
			row.mapnum = grid[i][4];
			row.name = grid[i][5];
			row.maptype = grid[i][6];
			row.maplevel = grid[i][7];
			row.maprank = grid[i][8];
			row.mapneedid = grid[i][9];
			row.mapneednum = grid[i][10];
			row.mapnextstage = grid[i][11];
			row.monsterid = grid[i][12];
			row.minlevel = grid[i][13];
			row.maxlevel = grid[i][14];
			row.maplayer0 = grid[i][15];
			row.maplayer1 = grid[i][16];
			row.maplayer2 = grid[i][17];
			row.mapslotbackground = grid[i][18];
			row.mapcount = grid[i][19];

			rowList.Add(row);
		}
		isLoaded = true;
	}

	public int NumRows()
	{
		return rowList.Count;
	}

	public Row GetAt(int i)
	{
		if(rowList.Count <= i)
			return null;
		return rowList[i];
	}

	public Row Find_id(string find)
	{
		return rowList.Find(x => x.id == find);
	}
	public List<Row> FindAll_id(string find)
	{
		return rowList.FindAll(x => x.id == find);
	}
	public Row Find_description(string find)
	{
		return rowList.Find(x => x.description == find);
	}
	public List<Row> FindAll_description(string find)
	{
		return rowList.FindAll(x => x.description == find);
	}
	public Row Find_coreid(string find)
	{
		return rowList.Find(x => x.coreid == find);
	}
	public List<Row> FindAll_coreid(string find)
	{
		return rowList.FindAll(x => x.coreid == find);
	}
	public Row Find_maparray(string find)
	{
		return rowList.Find(x => x.maparray == find);
	}
	public List<Row> FindAll_maparray(string find)
	{
		return rowList.FindAll(x => x.maparray == find);
	}
	public Row Find_mapnum(string find)
	{
		return rowList.Find(x => x.mapnum == find);
	}
	public List<Row> FindAll_mapnum(string find)
	{
		return rowList.FindAll(x => x.mapnum == find);
	}
	public Row Find_name(string find)
	{
		return rowList.Find(x => x.name == find);
	}
	public List<Row> FindAll_name(string find)
	{
		return rowList.FindAll(x => x.name == find);
	}
	public Row Find_maptype(string find)
	{
		return rowList.Find(x => x.maptype == find);
	}
	public List<Row> FindAll_maptype(string find)
	{
		return rowList.FindAll(x => x.maptype == find);
	}
	public Row Find_maplevel(string find)
	{
		return rowList.Find(x => x.maplevel == find);
	}
	public List<Row> FindAll_maplevel(string find)
	{
		return rowList.FindAll(x => x.maplevel == find);
	}
	public Row Find_maprank(string find)
	{
		return rowList.Find(x => x.maprank == find);
	}
	public List<Row> FindAll_maprank(string find)
	{
		return rowList.FindAll(x => x.maprank == find);
	}
	public Row Find_mapneedid(string find)
	{
		return rowList.Find(x => x.mapneedid == find);
	}
	public List<Row> FindAll_mapneedid(string find)
	{
		return rowList.FindAll(x => x.mapneedid == find);
	}
	public Row Find_mapneednum(string find)
	{
		return rowList.Find(x => x.mapneednum == find);
	}
	public List<Row> FindAll_mapneednum(string find)
	{
		return rowList.FindAll(x => x.mapneednum == find);
	}
	public Row Find_mapnextstage(string find)
	{
		return rowList.Find(x => x.mapnextstage == find);
	}
	public List<Row> FindAll_mapnextstage(string find)
	{
		return rowList.FindAll(x => x.mapnextstage == find);
	}
	public Row Find_monsterid(string find)
	{
		return rowList.Find(x => x.monsterid == find);
	}
	public List<Row> FindAll_monsterid(string find)
	{
		return rowList.FindAll(x => x.monsterid == find);
	}
	public Row Find_minlevel(string find)
	{
		return rowList.Find(x => x.minlevel == find);
	}
	public List<Row> FindAll_minlevel(string find)
	{
		return rowList.FindAll(x => x.minlevel == find);
	}
	public Row Find_maxlevel(string find)
	{
		return rowList.Find(x => x.maxlevel == find);
	}
	public List<Row> FindAll_maxlevel(string find)
	{
		return rowList.FindAll(x => x.maxlevel == find);
	}
	public Row Find_maplayer0(string find)
	{
		return rowList.Find(x => x.maplayer0 == find);
	}
	public List<Row> FindAll_maplayer0(string find)
	{
		return rowList.FindAll(x => x.maplayer0 == find);
	}
	public Row Find_maplayer1(string find)
	{
		return rowList.Find(x => x.maplayer1 == find);
	}
	public List<Row> FindAll_maplayer1(string find)
	{
		return rowList.FindAll(x => x.maplayer1 == find);
	}
	public Row Find_maplayer2(string find)
	{
		return rowList.Find(x => x.maplayer2 == find);
	}
	public List<Row> FindAll_maplayer2(string find)
	{
		return rowList.FindAll(x => x.maplayer2 == find);
	}
	public Row Find_mapslotbackground(string find)
	{
		return rowList.Find(x => x.mapslotbackground == find);
	}
	public List<Row> FindAll_mapslotbackground(string find)
	{
		return rowList.FindAll(x => x.mapslotbackground == find);
	}
	public Row Find_mapcount(string find)
	{
		return rowList.Find(x => x.mapcount == find);
	}
	public List<Row> FindAll_mapcount(string find)
	{
		return rowList.FindAll(x => x.mapcount == find);
	}

}