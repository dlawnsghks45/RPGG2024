// This code automatically generated by TableCodeGen
using UnityEngine;
using System.Collections;
using System.Collections.Generic;

public class DungeonDB : MonoBehaviour
{
    
    public TextAsset ItemDatabase;

   
    public void Awake()
    {
        ItemDatabase = Resources.Load("CSV/Dungeon") as TextAsset;
        Load(ItemDatabase);
    }

    //싱글톤만들기. 변경
    private static DungeonDB _instance = null;
    public static DungeonDB Instance
    {
        get
        {
            if (_instance == null)
            {
                _instance = FindObjectOfType(typeof(DungeonDB)) as DungeonDB;

                if (_instance == null)
                {
                }
            }
            return _instance;
        }
    }


	public class Row
	{
        		public string id;
		public string descriptionKor;
		public string mapid;
		public string monid;
		public string maprank;
		public string mapname;
		public string levelid;
		public string dungeonbackground;
		public string needitem;
		public string needhowmany;
		public string mondrop;
		public string monbossdrop;

	}

	List<Row> rowList = new List<Row>();
	bool isLoaded = false;

	public bool IsLoaded()
	{
		return isLoaded;
	}

	public List<Row> GetRowList()
	{
		return rowList;
	}

	public void Load(TextAsset csv)
	{
		rowList.Clear();
		string[][] grid = CsvParser2.Parse(csv.text);
		for(int i = 1 ; i < grid.Length ; i++)
		{
			Row row = new Row();
			row.id = grid[i][0];
			row.descriptionKor = grid[i][1];
			row.mapid = grid[i][2];
			row.monid = grid[i][3];
			row.maprank = grid[i][4];
			row.mapname = grid[i][5];
			row.levelid = grid[i][6];
			row.dungeonbackground = grid[i][7];
			row.needitem = grid[i][8];
			row.needhowmany = grid[i][9];
			row.mondrop = grid[i][10];
			row.monbossdrop = grid[i][11];

			rowList.Add(row);
		}
		isLoaded = true;
	}

	public int NumRows()
	{
		return rowList.Count;
	}

	public Row GetAt(int i)
	{
		if(rowList.Count <= i)
			return null;
		return rowList[i];
	}

	public Row Find_id(string find)
	{
		return rowList.Find(x => x.id == find);
	}
	public List<Row> FindAll_id(string find)
	{
		return rowList.FindAll(x => x.id == find);
	}
	public Row Find_descriptionKor(string find)
	{
		return rowList.Find(x => x.descriptionKor == find);
	}
	public List<Row> FindAll_descriptionKor(string find)
	{
		return rowList.FindAll(x => x.descriptionKor == find);
	}
	public Row Find_mapid(string find)
	{
		return rowList.Find(x => x.mapid == find);
	}
	public List<Row> FindAll_mapid(string find)
	{
		return rowList.FindAll(x => x.mapid == find);
	}
	public Row Find_monid(string find)
	{
		return rowList.Find(x => x.monid == find);
	}
	public List<Row> FindAll_monid(string find)
	{
		return rowList.FindAll(x => x.monid == find);
	}
	public Row Find_maprank(string find)
	{
		return rowList.Find(x => x.maprank == find);
	}
	public List<Row> FindAll_maprank(string find)
	{
		return rowList.FindAll(x => x.maprank == find);
	}
	public Row Find_mapname(string find)
	{
		return rowList.Find(x => x.mapname == find);
	}
	public List<Row> FindAll_mapname(string find)
	{
		return rowList.FindAll(x => x.mapname == find);
	}
	public Row Find_levelid(string find)
	{
		return rowList.Find(x => x.levelid == find);
	}
	public List<Row> FindAll_levelid(string find)
	{
		return rowList.FindAll(x => x.levelid == find);
	}
	public Row Find_dungeonbackground(string find)
	{
		return rowList.Find(x => x.dungeonbackground == find);
	}
	public List<Row> FindAll_dungeonbackground(string find)
	{
		return rowList.FindAll(x => x.dungeonbackground == find);
	}
	public Row Find_needitem(string find)
	{
		return rowList.Find(x => x.needitem == find);
	}
	public List<Row> FindAll_needitem(string find)
	{
		return rowList.FindAll(x => x.needitem == find);
	}
	public Row Find_needhowmany(string find)
	{
		return rowList.Find(x => x.needhowmany == find);
	}
	public List<Row> FindAll_needhowmany(string find)
	{
		return rowList.FindAll(x => x.needhowmany == find);
	}
	public Row Find_mondrop(string find)
	{
		return rowList.Find(x => x.mondrop == find);
	}
	public List<Row> FindAll_mondrop(string find)
	{
		return rowList.FindAll(x => x.mondrop == find);
	}
	public Row Find_monbossdrop(string find)
	{
		return rowList.Find(x => x.monbossdrop == find);
	}
	public List<Row> FindAll_monbossdrop(string find)
	{
		return rowList.FindAll(x => x.monbossdrop == find);
	}

}