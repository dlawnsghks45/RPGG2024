// This code automatically generated by TableCodeGen
using UnityEngine;
using System.Collections;
using System.Collections.Generic;

public class TalismanDB : MonoBehaviour
{
    
    public TextAsset ItemDatabase;

   
    public void Awake()
    {
        ItemDatabase = Resources.Load("CSV/Talisman") as TextAsset;
        Load(ItemDatabase);
    }

    //싱글톤만들기. 변경
    private static TalismanDB _instance = null;
    public static TalismanDB Instance
    {
        get
        {
            if (_instance == null)
            {
                _instance = FindObjectOfType(typeof(TalismanDB)) as TalismanDB;

                if (_instance == null)
                {
                }
            }
            return _instance;
        }
    }


	public class Row
	{
        		public string id;
		public string num;
		public string description;
		public string name;
		public string eskill;
		public string setinfo1;
		public string setinfo2;
		public string setinfo3;
		public string sprite;

	}

	List<Row> rowList = new List<Row>();
	bool isLoaded = false;

	public bool IsLoaded()
	{
		return isLoaded;
	}

	public List<Row> GetRowList()
	{
		return rowList;
	}

	public void Load(TextAsset csv)
	{
		rowList.Clear();
		string[][] grid = CsvParser2.Parse(csv.text);
		for(int i = 1 ; i < grid.Length ; i++)
		{
			Row row = new Row();
			row.id = grid[i][0];
			row.num = grid[i][1];
			row.description = grid[i][2];
			row.name = grid[i][3];
			row.eskill = grid[i][4];
			row.setinfo1 = grid[i][5];
			row.setinfo2 = grid[i][6];
			row.setinfo3 = grid[i][7];
			row.sprite = grid[i][8];

			rowList.Add(row);
		}
		isLoaded = true;
	}

	public int NumRows()
	{
		return rowList.Count;
	}

	public Row GetAt(int i)
	{
		if(rowList.Count <= i)
			return null;
		return rowList[i];
	}

	public Row Find_id(string find)
	{
		return rowList.Find(x => x.id == find);
	}
	public List<Row> FindAll_id(string find)
	{
		return rowList.FindAll(x => x.id == find);
	}
	public Row Find_num(string find)
	{
		return rowList.Find(x => x.num == find);
	}
	public List<Row> FindAll_num(string find)
	{
		return rowList.FindAll(x => x.num == find);
	}
	public Row Find_description(string find)
	{
		return rowList.Find(x => x.description == find);
	}
	public List<Row> FindAll_description(string find)
	{
		return rowList.FindAll(x => x.description == find);
	}
	public Row Find_name(string find)
	{
		return rowList.Find(x => x.name == find);
	}
	public List<Row> FindAll_name(string find)
	{
		return rowList.FindAll(x => x.name == find);
	}
	public Row Find_eskill(string find)
	{
		return rowList.Find(x => x.eskill == find);
	}
	public List<Row> FindAll_eskill(string find)
	{
		return rowList.FindAll(x => x.eskill == find);
	}
	public Row Find_setinfo1(string find)
	{
		return rowList.Find(x => x.setinfo1 == find);
	}
	public List<Row> FindAll_setinfo1(string find)
	{
		return rowList.FindAll(x => x.setinfo1 == find);
	}
	public Row Find_setinfo2(string find)
	{
		return rowList.Find(x => x.setinfo2 == find);
	}
	public List<Row> FindAll_setinfo2(string find)
	{
		return rowList.FindAll(x => x.setinfo2 == find);
	}
	public Row Find_setinfo3(string find)
	{
		return rowList.Find(x => x.setinfo3 == find);
	}
	public List<Row> FindAll_setinfo3(string find)
	{
		return rowList.FindAll(x => x.setinfo3 == find);
	}
	public Row Find_sprite(string find)
	{
		return rowList.Find(x => x.sprite == find);
	}
	public List<Row> FindAll_sprite(string find)
	{
		return rowList.FindAll(x => x.sprite == find);
	}

}