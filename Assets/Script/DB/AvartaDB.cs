// This code automatically generated by TableCodeGen
using UnityEngine;
using System.Collections;
using System.Collections.Generic;

public class AvartaDB : MonoBehaviour
{
    
    public TextAsset ItemDatabase;

   
    public void Awake()
    {
        ItemDatabase = Resources.Load("CSV/Avarta") as TextAsset;
        Load(ItemDatabase);
    }

    //싱글톤만들기. 변경
    private static AvartaDB _instance = null;
    public static AvartaDB Instance
    {
        get
        {
            if (_instance == null)
            {
                _instance = FindObjectOfType(typeof(AvartaDB)) as AvartaDB;

                if (_instance == null)
                {
                }
            }
            return _instance;
        }
    }


	public class Row
	{
        		public string id;
		public string num;
		public string desc;
		public string statdesc;
		public string name;
		public string info;
		public string getinfo;
		public string type;
		public string sprite;
		public string equipsprite;
		public string stattype;
		public string stat;
		public string stat2;
		public string statinfo;
		public string rare;
		public string isshow;
		public string costtype;
		public string cost;

	}

	List<Row> rowList = new List<Row>();
	bool isLoaded = false;

	public bool IsLoaded()
	{
		return isLoaded;
	}

	public List<Row> GetRowList()
	{
		return rowList;
	}

	public void Load(TextAsset csv)
	{
		rowList.Clear();
		string[][] grid = CsvParser2.Parse(csv.text);
		for(int i = 1 ; i < grid.Length ; i++)
		{
			Row row = new Row();
			row.id = grid[i][0];
			row.num = grid[i][1];
			row.desc = grid[i][2];
			row.statdesc = grid[i][3];
			row.name = grid[i][4];
			row.info = grid[i][5];
			row.getinfo = grid[i][6];
			row.type = grid[i][7];
			row.sprite = grid[i][8];
			row.equipsprite = grid[i][9];
			row.stattype = grid[i][10];
			row.stat = grid[i][11];
			row.stat2 = grid[i][12];
			row.statinfo = grid[i][13];
			row.rare = grid[i][14];
			row.isshow = grid[i][15];
			row.costtype = grid[i][16];
			row.cost = grid[i][17];

			rowList.Add(row);
		}
		isLoaded = true;
	}

	public int NumRows()
	{
		return rowList.Count;
	}

	public Row GetAt(int i)
	{
		if(rowList.Count <= i)
			return null;
		return rowList[i];
	}

	public Row Find_id(string find)
	{
		return rowList.Find(x => x.id == find);
	}
	public List<Row> FindAll_id(string find)
	{
		return rowList.FindAll(x => x.id == find);
	}
	public Row Find_num(string find)
	{
		return rowList.Find(x => x.num == find);
	}
	public List<Row> FindAll_num(string find)
	{
		return rowList.FindAll(x => x.num == find);
	}
	public Row Find_desc(string find)
	{
		return rowList.Find(x => x.desc == find);
	}
	public List<Row> FindAll_desc(string find)
	{
		return rowList.FindAll(x => x.desc == find);
	}
	public Row Find_statdesc(string find)
	{
		return rowList.Find(x => x.statdesc == find);
	}
	public List<Row> FindAll_statdesc(string find)
	{
		return rowList.FindAll(x => x.statdesc == find);
	}
	public Row Find_name(string find)
	{
		return rowList.Find(x => x.name == find);
	}
	public List<Row> FindAll_name(string find)
	{
		return rowList.FindAll(x => x.name == find);
	}
	public Row Find_info(string find)
	{
		return rowList.Find(x => x.info == find);
	}
	public List<Row> FindAll_info(string find)
	{
		return rowList.FindAll(x => x.info == find);
	}
	public Row Find_getinfo(string find)
	{
		return rowList.Find(x => x.getinfo == find);
	}
	public List<Row> FindAll_getinfo(string find)
	{
		return rowList.FindAll(x => x.getinfo == find);
	}
	public Row Find_type(string find)
	{
		return rowList.Find(x => x.type == find);
	}
	public List<Row> FindAll_type(string find)
	{
		return rowList.FindAll(x => x.type == find);
	}
	public Row Find_sprite(string find)
	{
		return rowList.Find(x => x.sprite == find);
	}
	public List<Row> FindAll_sprite(string find)
	{
		return rowList.FindAll(x => x.sprite == find);
	}
	public Row Find_equipsprite(string find)
	{
		return rowList.Find(x => x.equipsprite == find);
	}
	public List<Row> FindAll_equipsprite(string find)
	{
		return rowList.FindAll(x => x.equipsprite == find);
	}
	public Row Find_stattype(string find)
	{
		return rowList.Find(x => x.stattype == find);
	}
	public List<Row> FindAll_stattype(string find)
	{
		return rowList.FindAll(x => x.stattype == find);
	}
	public Row Find_stat(string find)
	{
		return rowList.Find(x => x.stat == find);
	}
	public List<Row> FindAll_stat(string find)
	{
		return rowList.FindAll(x => x.stat == find);
	}
	public Row Find_stat2(string find)
	{
		return rowList.Find(x => x.stat2 == find);
	}
	public List<Row> FindAll_stat2(string find)
	{
		return rowList.FindAll(x => x.stat2 == find);
	}
	public Row Find_statinfo(string find)
	{
		return rowList.Find(x => x.statinfo == find);
	}
	public List<Row> FindAll_statinfo(string find)
	{
		return rowList.FindAll(x => x.statinfo == find);
	}
	public Row Find_rare(string find)
	{
		return rowList.Find(x => x.rare == find);
	}
	public List<Row> FindAll_rare(string find)
	{
		return rowList.FindAll(x => x.rare == find);
	}
	public Row Find_isshow(string find)
	{
		return rowList.Find(x => x.isshow == find);
	}
	public List<Row> FindAll_isshow(string find)
	{
		return rowList.FindAll(x => x.isshow == find);
	}
	public Row Find_costtype(string find)
	{
		return rowList.Find(x => x.costtype == find);
	}
	public List<Row> FindAll_costtype(string find)
	{
		return rowList.FindAll(x => x.costtype == find);
	}
	public Row Find_cost(string find)
	{
		return rowList.Find(x => x.cost == find);
	}
	public List<Row> FindAll_cost(string find)
	{
		return rowList.FindAll(x => x.cost == find);
	}

}