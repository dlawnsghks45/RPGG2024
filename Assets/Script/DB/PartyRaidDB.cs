// This code automatically generated by TableCodeGen
using UnityEngine;
using System.Collections;
using System.Collections.Generic;

public class PartyRaidDB : MonoBehaviour
{
    
    public TextAsset ItemDatabase;

   
    public void Awake()
    {
        ItemDatabase = Resources.Load("CSV/PartyRaid") as TextAsset;
        Load(ItemDatabase);
    }

    //싱글톤만들기. 변경
    private static PartyRaidDB _instance = null;
    public static PartyRaidDB Instance
    {
        get
        {
            if (_instance == null)
            {
                _instance = FindObjectOfType(typeof(PartyRaidDB)) as PartyRaidDB;

                if (_instance == null)
                {
                }
            }
            return _instance;
        }
    }


	public class Row
	{
        		public string id;
		public string map;
		public string bossmap;
		public string middlemap;
		public string maxlevel;
		public string dropid;

	}

	List<Row> rowList = new List<Row>();
	bool isLoaded = false;

	public bool IsLoaded()
	{
		return isLoaded;
	}

	public List<Row> GetRowList()
	{
		return rowList;
	}

	public void Load(TextAsset csv)
	{
		rowList.Clear();
		string[][] grid = CsvParser2.Parse(csv.text);
		for(int i = 1 ; i < grid.Length ; i++)
		{
			Row row = new Row();
			row.id = grid[i][0];
			row.map = grid[i][1];
			row.bossmap = grid[i][2];
			row.middlemap = grid[i][3];
			row.maxlevel = grid[i][4];
			row.dropid = grid[i][5];

			rowList.Add(row);
		}
		isLoaded = true;
	}

	public int NumRows()
	{
		return rowList.Count;
	}

	public Row GetAt(int i)
	{
		if(rowList.Count <= i)
			return null;
		return rowList[i];
	}

	public Row Find_id(string find)
	{
		return rowList.Find(x => x.id == find);
	}
	public List<Row> FindAll_id(string find)
	{
		return rowList.FindAll(x => x.id == find);
	}
	public Row Find_map(string find)
	{
		return rowList.Find(x => x.map == find);
	}
	public List<Row> FindAll_map(string find)
	{
		return rowList.FindAll(x => x.map == find);
	}
	public Row Find_bossmap(string find)
	{
		return rowList.Find(x => x.bossmap == find);
	}
	public List<Row> FindAll_bossmap(string find)
	{
		return rowList.FindAll(x => x.bossmap == find);
	}
	public Row Find_middlemap(string find)
	{
		return rowList.Find(x => x.middlemap == find);
	}
	public List<Row> FindAll_middlemap(string find)
	{
		return rowList.FindAll(x => x.middlemap == find);
	}
	public Row Find_maxlevel(string find)
	{
		return rowList.Find(x => x.maxlevel == find);
	}
	public List<Row> FindAll_maxlevel(string find)
	{
		return rowList.FindAll(x => x.maxlevel == find);
	}
	public Row Find_dropid(string find)
	{
		return rowList.Find(x => x.dropid == find);
	}
	public List<Row> FindAll_dropid(string find)
	{
		return rowList.FindAll(x => x.dropid == find);
	}

}