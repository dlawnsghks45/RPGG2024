// This code automatically generated by TableCodeGen
using UnityEngine;
using System.Collections;
using System.Collections.Generic;

public class QuestDB : MonoBehaviour
{
    
    public TextAsset ItemDatabase;

   
    public void Awake()
    {
        ItemDatabase = Resources.Load("CSV/Quest") as TextAsset;
        Load(ItemDatabase);
    }

    //싱글톤만들기. 변경
    private static QuestDB _instance = null;
    public static QuestDB Instance
    {
        get
        {
            if (_instance == null)
            {
                _instance = FindObjectOfType(typeof(QuestDB)) as QuestDB;

                if (_instance == null)
                {
                }
            }
            return _instance;
        }
    }


	public class Row
	{
        		public string id;
		public string name;
		public string info;
		public string description;
		public string count;
		public string type;
		public string subtype;
		public string itemid;
		public string itemhw;
		public string givept;
		public string pointtotalnum;
		public string questexp;
		public string isevent;
		public string isseasonpremium;
		public string seasonpt;

	}

	List<Row> rowList = new List<Row>();
	bool isLoaded = false;

	public bool IsLoaded()
	{
		return isLoaded;
	}

	public List<Row> GetRowList()
	{
		return rowList;
	}

	public void Load(TextAsset csv)
	{
		rowList.Clear();
		string[][] grid = CsvParser2.Parse(csv.text);
		for(int i = 1 ; i < grid.Length ; i++)
		{
			Row row = new Row();
			row.id = grid[i][0];
			row.name = grid[i][1];
			row.info = grid[i][2];
			row.description = grid[i][3];
			row.count = grid[i][4];
			row.type = grid[i][5];
			row.subtype = grid[i][6];
			row.itemid = grid[i][7];
			row.itemhw = grid[i][8];
			row.givept = grid[i][9];
			row.pointtotalnum = grid[i][10];
			row.questexp = grid[i][11];
			row.isevent = grid[i][12];
			row.isseasonpremium = grid[i][13];
			row.seasonpt = grid[i][14];

			rowList.Add(row);
		}
		isLoaded = true;
	}

	public int NumRows()
	{
		return rowList.Count;
	}

	public Row GetAt(int i)
	{
		if(rowList.Count <= i)
			return null;
		return rowList[i];
	}

	public Row Find_id(string find)
	{
		return rowList.Find(x => x.id == find);
	}
	public List<Row> FindAll_id(string find)
	{
		return rowList.FindAll(x => x.id == find);
	}
	public Row Find_name(string find)
	{
		return rowList.Find(x => x.name == find);
	}
	public List<Row> FindAll_name(string find)
	{
		return rowList.FindAll(x => x.name == find);
	}
	public Row Find_info(string find)
	{
		return rowList.Find(x => x.info == find);
	}
	public List<Row> FindAll_info(string find)
	{
		return rowList.FindAll(x => x.info == find);
	}
	public Row Find_description(string find)
	{
		return rowList.Find(x => x.description == find);
	}
	public List<Row> FindAll_description(string find)
	{
		return rowList.FindAll(x => x.description == find);
	}
	public Row Find_count(string find)
	{
		return rowList.Find(x => x.count == find);
	}
	public List<Row> FindAll_count(string find)
	{
		return rowList.FindAll(x => x.count == find);
	}
	public Row Find_type(string find)
	{
		return rowList.Find(x => x.type == find);
	}
	public List<Row> FindAll_type(string find)
	{
		return rowList.FindAll(x => x.type == find);
	}
	public Row Find_subtype(string find)
	{
		return rowList.Find(x => x.subtype == find);
	}
	public List<Row> FindAll_subtype(string find)
	{
		return rowList.FindAll(x => x.subtype == find);
	}
	public Row Find_itemid(string find)
	{
		return rowList.Find(x => x.itemid == find);
	}
	public List<Row> FindAll_itemid(string find)
	{
		return rowList.FindAll(x => x.itemid == find);
	}
	public Row Find_itemhw(string find)
	{
		return rowList.Find(x => x.itemhw == find);
	}
	public List<Row> FindAll_itemhw(string find)
	{
		return rowList.FindAll(x => x.itemhw == find);
	}
	public Row Find_givept(string find)
	{
		return rowList.Find(x => x.givept == find);
	}
	public List<Row> FindAll_givept(string find)
	{
		return rowList.FindAll(x => x.givept == find);
	}
	public Row Find_pointtotalnum(string find)
	{
		return rowList.Find(x => x.pointtotalnum == find);
	}
	public List<Row> FindAll_pointtotalnum(string find)
	{
		return rowList.FindAll(x => x.pointtotalnum == find);
	}
	public Row Find_questexp(string find)
	{
		return rowList.Find(x => x.questexp == find);
	}
	public List<Row> FindAll_questexp(string find)
	{
		return rowList.FindAll(x => x.questexp == find);
	}
	public Row Find_isevent(string find)
	{
		return rowList.Find(x => x.isevent == find);
	}
	public List<Row> FindAll_isevent(string find)
	{
		return rowList.FindAll(x => x.isevent == find);
	}
	public Row Find_isseasonpremium(string find)
	{
		return rowList.Find(x => x.isseasonpremium == find);
	}
	public List<Row> FindAll_isseasonpremium(string find)
	{
		return rowList.FindAll(x => x.isseasonpremium == find);
	}
	public Row Find_seasonpt(string find)
	{
		return rowList.Find(x => x.seasonpt == find);
	}
	public List<Row> FindAll_seasonpt(string find)
	{
		return rowList.FindAll(x => x.seasonpt == find);
	}

}